name: Send Prompt to OpenAI

on:
  push:
    branches:
      - main  # Change this to your target branch if needed

jobs:
  send_prompt:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # Specify the required Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage

      - name: Extract function signatures and logic
        id: extract_code
        run: |
          # Extract function signatures, method definitions, and conditional logic
          SIGNATURES=$(grep -E 'def |class ' *.py)
          CONDITION_LOGIC=$(grep -E 'if |else |for |while ' *.py)

          # Output the extracted data for the prompt
          echo "::set-output name=signatures::$SIGNATURES"
          echo "::set-output name=condition_logic::$CONDITION_LOGIC"

      - name: Get code documentation and docstrings
        id: extract_docs
        run: |
          # Extract all docstrings and inline comments from the code
          DOCSTRINGS=$(grep -E '"""|\'\'\''|# ' *.py)

          # Output the extracted docs for the prompt
          echo "::set-output name=docs::$DOCSTRINGS"

      - name: Get code coverage data
        id: get_coverage
        run: |
          # Run code coverage tool
          coverage run -m unittest discover
          COVERAGE_REPORT=$(coverage report)

          # Output the coverage report for the prompt
          echo "::set-output name=coverage::$COVERAGE_REPORT"

      - name: Get current test cases
        id: get_tests
        run: |
          # Get the contents of the current test file
          TEST_CASES=$(cat test_user_registration.py)

          # Output the test cases for the prompt
          echo "::set-output name=test_cases::$TEST_CASES"

      - name: Send prompt to OpenAI and save response
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Get the extracted code and other details
          SIGNATURES="${{ steps.extract_code.outputs.signatures }}"
          CONDITION_LOGIC="${{ steps.extract_code.outputs.condition_logic }}"
          DOCSTRINGS="${{ steps.extract_docs.outputs.docs }}"
          COVERAGE_REPORT="${{ steps.get_coverage.outputs.coverage }}"
          TEST_CASES="${{ steps.get_tests.outputs.test_cases }}"

          # Prepare the prompt with structured information (without git diff)
          PROMPT="Here are the relevant details from the codebase:

          1. Function Signatures and Method Definitions:
          ${SIGNATURES}

          2. Conditional Statements and Logic:
          ${CONDITION_LOGIC}

          3. Documentation and Docstrings:
          ${DOCSTRINGS}

          4. Code Coverage Information:
          ${COVERAGE_REPORT}

          5. Existing Test Cases:
          ${TEST_CASES}

          Based on the above details, please generate Python 'unittest' test cases."

          # Send request to OpenAI and capture the response
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $OPENAI_API_KEY" \
          -d '{
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "system", "content": "You are a programmer tasked with generating Python 'unittest' test cases based on the provided code details."}, {"role": "user", "content": "'"$PROMPT"'"}]
          }' | jq -r '.choices[0].message.content')

          # Output the response for verification
          echo "OpenAI Response: $RESPONSE"

          # Save the response to a file
          echo "$RESPONSE" > response.txt

      - name: Commit response file
        run: |
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          git add response.txt
          git commit -m "Add OpenAI response based on code details"
          git push
