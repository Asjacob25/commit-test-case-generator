name: Generate Test Cases

on:
  push:
    branches:
      - main  # Update to your branch if needed

jobs:
  generate_test_cases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq (for parsing JSON)
        run: sudo apt-get install -y jq

      - name: Get changed files and their content
        id: get_file_content
        run: |
          # Get list of changed files in the current commit
          CHANGED_FILES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }} | \
            jq -r '.files[] | select(.filename | test(".py|.js|.java")) | .filename')

          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No relevant files changed in this commit."
            exit 0
          fi

          # Fetch file contents from GitHub API
          FILE_CONTENTS=""
          for FILE in $CHANGED_FILES; do
            CONTENT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/contents/$FILE | \
              jq -r '.content' | base64 --decode)

            FILE_CONTENTS+="\n\nFile: $FILE\n$CONTENT"
          done

          echo "File contents prepared."
          echo "FILE_CONTENTS=$FILE_CONTENTS" >> $GITHUB_ENV

      - name: Generate test cases with OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Prepare the prompt
          PROMPT="Generate test cases for the following changes:\n${{ env.FILE_CONTENTS }}"

          # Call OpenAI API to generate test cases
          RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d '{
              "model": "gpt-3.5-turbo",
              "messages": [{"role": "user", "content": "'"$PROMPT"'"}]
            }')

          # Extract test cases from the response
          TEST_CASES=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

          # Save the test cases to a file
          echo "$TEST_CASES" > generated_test_cases.txt

      - name: Upload test cases
        uses: actions/upload-artifact@v3
        with:
          name: generated-test-cases
          path: generated_test_cases.txt
