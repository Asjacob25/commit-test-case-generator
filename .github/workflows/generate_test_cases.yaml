name: Generate Test Cases

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  generate-test-cases:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python (or your language's environment)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install pytest pytest-cov
      shell: /usr/bin/bash -e {0}
      env:
        pythonLocation: /opt/hostedtoolcache/Python/3.11.10/x64
        PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.10/x64/lib/pkgconfig
        Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.10/x64
        Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.10/x64
        Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.10/x64
        LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.10/x64/lib

    - name: Run tests and generate coverage report
      run: |
        pytest --cov=my_project > coverage.txt  # Adjust 'my_project' to your actual project name

    - name: Extract uncovered lines (simple example)
      run: |
        grep "100%" coverage.txt | awk '{print $1}' > uncovered_lines.txt

    - name: Send uncovered lines to OpenAI
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # Ensure your OpenAI API key is in GitHub secrets
      run: |
        uncovered_lines=$(cat uncovered_lines.txt)
        prompt="Generate test cases for the following lines of code that lack coverage:\n$uncovered_lines"
        curl https://api.openai.com/v1/completions \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $OPENAI_API_KEY" \
          -d '{
            "model": "gpt-4",
            "prompt": "'"$prompt"'",
            "max_tokens": 1000
          }' > response.txt

    - name: Save response to artifact
      uses: actions/upload-artifact@v3
      with:
        name: openai-response
        path: response.txt
