# name: Generate Test Cases

# on:
#   push:
#     branches:
#       - main  # Change this to your default branch if necessary

# jobs:
#   generate_test_cases:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Install dependencies
#         run: |
#           sudo apt-get install -y jq

#       - name: Get changed files
#         id: get_changed_files
#         run: |
#           # Get the list of changed files using the GitHub REST API
#           CHANGED_FILES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#             https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }} \
#             | jq -r '.files[].filename')

#           # Debug: Output changed files
#           echo "Changed Files: $CHANGED_FILES"

#           # Ensure CHANGED_FILES is not empty
#           if [[ -z "$CHANGED_FILES" ]]; then
#             echo "No files changed in the commit."
#             exit 1
#           fi

#           # Output the changed files to be used in the next step
#           echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

#       - name: Get file contents
#         id: get_file_contents
#         run: |
#           # Initialize a variable to hold file contents
#           FILE_CONTENTS=""

#           # Loop through each changed file and fetch its content using GitHub API
#           for FILE in $CHANGED_FILES; do
#             # Fetch the file content from GitHub API (returns base64 encoded content)
#             FILE_CONTENT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#               https://api.github.com/repos/${{ github.repository }}/contents/$FILE \
#               | jq -r '.content')

#             # Decode the base64 encoded content
#             DECODED_FILE_CONTENT=$(echo "$FILE_CONTENT" | base64 --decode)

#             # Append the file name and its decoded content to FILE_CONTENTS
#             FILE_CONTENTS+="\n\nFile: $FILE\n$DECODED_FILE_CONTENT"
#           done

#           # Debug: Output the decoded file contents
#           echo -e "File Contents: $FILE_CONTENTS"

#           # Output the file contents for the next step
#           echo "FILE_CONTENTS=$FILE_CONTENTS" >> $GITHUB_ENV

#       - name: Generate test cases with OpenAI
#         id: generate_test_cases
#         env:
#           OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
#         run: |
#           # Prepare the prompt for OpenAI
#           PROMPT="Generate test cases for the following commit:\nCommit message: '${{ github.event.head_commit.message }}'\n\nCode changes:\n${{ env.FILE_CONTENTS }}"

#           # Call OpenAI API to generate test cases
#           RESPONSE=$(curl -s -o response.txt -w "%{http_code}" -X POST https://api.openai.com/v1/chat/completions \
#             -H "Content-Type: application/json" \
#             -H "Authorization: Bearer $OPENAI_API_KEY" \
#             -d '{
#               "model": "gpt-3.5-turbo",
#               "messages": [{"role": "user", "content": "'"$PROMPT"'"}]
#             }')

#           # Check if the response was successful (HTTP status code 200)
#           if [ "$RESPONSE" -ne 200 ]; then
#             echo "Error: Failed to get a response from OpenAI. Status code: $RESPONSE"
#             cat response.txt  # Output the error response for debugging
#             exit 1
#           fi

#           # Extract the test cases from the response
#           TEST_CASES=$(cat response.txt | jq -r '.choices[0].message.content')

#           # Save the test cases to a file
#           echo "Generated Test Cases:" > generated_test_cases.txt
#           echo "$TEST_CASES" >> generated_test_cases.txt

#       - name: Upload generated test cases
#         uses: actions/upload-artifact@v3
#         with:
#           name: generated-test-cases
#           path: generated_test_cases.txt


on: [pull_request]

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      # This step checks out a copy of your repository.
      - uses: actions/checkout@v3
      # This step references the directory that contains the action.
      - uses: sshnaidm/gpt-code-review-action@v2.0
        with:
          openai-key: ${{ secrets.OPENAI_API_KEY }}
          # model: 'gpt-4'
          # max-length: 8000
          # prompt: 'Only suggest performance improvements for this code.'
          # post-if-error: false