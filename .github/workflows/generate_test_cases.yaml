name: Automated Test Generation Pipeline
on:
  push:
    branches:
      - main
      - "feature/*"
      - "ashley-br"
    paths:
      - '**.py'
      - '**.js'
      - '**.ts'
      - '**.java'
      - '**.cpp'
      - '**.cs'
      - '**.go'

jobs:
  generate-tests:
    runs-on: ubuntu-latest
    environment: testgeneration
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ secrets.PAT_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pytest coverage  # Python dependencies
          npm install -g jest  # JavaScript dependencies
      - name: Create tests directory
        run: mkdir -p generated_tests
      - name: Detect changed files
        id: changed-files
        run: |
          changed_files=$(git diff --name-only HEAD^ HEAD | grep -E '\.(py|js|ts|java|cpp|cs|go)$' || true)
          if [ -n "$changed_files" ]; then
            changed_files_sanitized=$(echo "$changed_files" | tr '\n' ' ')
            echo "CHANGED_FILES=$changed_files_sanitized" >> $GITHUB_ENV
            echo "Found changed files: $changed_files_sanitized"
          else
            echo "No relevant source files changed"
            exit 0
          fi
      - name: Run test generation script
        if: env.CHANGED_FILES != ''
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: "gpt-4-turbo-preview"
          OPENAI_MAX_TOKENS: "2000"
        run: |
          echo "Generating tests for: ${{ env.CHANGED_FILES }}"
          python latest_generate_tests.py "${{ env.CHANGED_FILES }}"
      - name: Create unique branch name
        if: env.CHANGED_FILES != ''
        run: |
          branch_name="test-gen-$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV
      - name: Configure Git
        if: env.CHANGED_FILES != ''
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Run tests and generate coverage report
        if: env.CHANGED_FILES != ''
        run: |
          cd generated_tests
          for file in *; do
            case "$file" in
              *.py)
                coverage run -m pytest "$file" && coverage html -d coverage_py_report;;
              *.js|*.ts)
                jest --coverage --coverageDirectory=coverage_js_report;;
              *.java)
                javac "$file" && java -jar jacoco-cli.jar report generated_tests/coverage_java_report;;
              *.cpp|*.cs|*.go)
                echo "Add coverage command for language $file here";;
              *)
                echo "Unsupported language for coverage reporting";;
            esac
          done
      - name: Check for changes before commit
        if: env.CHANGED_FILES != ''
        run: |
          git status
          git diff --name-only
      - name: Commit and push changes
        if: env.CHANGED_FILES != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git checkout -b ${{ env.BRANCH_NAME }}
            git add generated_tests/
            git commit -m "Add generated test cases and coverage report"
            git push origin ${{ env.BRANCH_NAME }}
            echo "CHANGES_PUSHED=1" >> $GITHUB_ENV
          else
            echo "No changes to commit"
          fi
      - name: Create Pull Request
        if: env.CHANGES_PUSHED == '1'
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          pr_title: ":sparkles: New Test Cases and Coverage Report Generated"
          pr_body: |
            ## :robot_face: Automated Test Generation and Coverage
            Generated test cases for the following files:
            ```
            ${{ env.CHANGED_FILES }}
            ```
            Generated using OpenAI GPT-4.
          destination_branch: "main"
          source_branch: ${{ env.BRANCH_NAME }}
